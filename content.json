{"pages":[{"title":"","text":"","link":"/links.html"},{"title":"","text":"关于我…","link":"/about.html"}],"posts":[{"title":"JMeter如何使用Java编写测试用例-AbstractJavaSamplerClient","text":"概述在 JMeter 中， 支持我们可以编写 Java 代码来发送请求， 用来提高拓展性， 如下图所示 实践要成为 JMeter 可识别的脚本， 该脚本需要继承 AbstractJavaSamplerClient 类 123456789101112131415161718192021222324252627282930313233343536373839404142434445public class HttpBinPostCase extends AbstractJavaSamplerClient { HttpClient httpClient; String url; @Override public void setupTest(JavaSamplerContext context) { httpClient = HttpClients.createDefault(); url = context.getParameter(&quot;url&quot;); } @SneakyThrows @Override public SampleResult runTest(JavaSamplerContext context) { HttpPost httpPost= new HttpPost(url); SampleResult sampleResult=new SampleResult(); sampleResult.setSampleLabel(&quot;httpbin post case&quot;); sampleResult.sampleStart(); HttpResponse result = httpClient.execute(httpPost); String entity= EntityUtils.toString(result.getEntity()); if (result.getStatusLine().getStatusCode()==200){ sampleResult.setSuccessful(true); sampleResult.setResponseCodeOK(); }else { sampleResult.setSuccessful(false); sampleResult.setResponseCode(String.valueOf(result.getStatusLine().getStatusCode())); } sampleResult.setResponseData(entity, &quot;utf-8&quot;); // 在这里存储API 返回值 JMeterSampleResultMap.result.put(context.getJMeterVariables().getThreadName(), entity); return sampleResult; } @Override public void teardownTest(JavaSamplerContext context) { super.teardownTest(context); } @Override public Arguments getDefaultParameters() { Arguments arguments = new Arguments(); arguments.addArgument(&quot;url&quot;, &quot;https://httpbin.org/post&quot;); return arguments; }} 然后将该项目打包成一个 Jar 包， 再引入 JMeter 中即可","link":"/2022/03/22/JMeter%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Java%E7%BC%96%E5%86%99%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B-AbstractJavaSamplerClient/"},{"title":"JMeter如何管理测试数据","text":"CSV第一种最简单的也最常见的是通过 csv 来传入测试数据接下来我们测试下 CSV 取值 Mysql 数据库需要将 Mysql Driver Lib 下载保存的 lib 文件夹 那么如何遍历数据库中的每一个值呢？ 使用 foreach 遍历 先算出数据库有多少数据， 然后用 for 循环遍历 foreach：新建一个 FoeEach 的 controller Input variable： 指的是你之前设置的变量名 Output variable： 指的是你之后从这个变量集合中取出来的单个变量的名字","link":"/2022/03/21/JMeter%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/"},{"title":"JPA使用记录-1","text":"概述记录如何使用 JPA build.gradle 配置123456789101112131415161718192021222324252627282930313233plugins { id 'org.springframework.boot' version '2.6.4' id 'io.spring.dependency-management' version '1.0.11.RELEASE' id 'java'}group = 'com.example'version = '0.0.1-SNAPSHOT'sourceCompatibility = '1.8'configurations { compileOnly { extendsFrom annotationProcessor }}repositories { mavenCentral()}dependencies { implementation 'org.springframework.boot:spring-boot-starter-data-jpa' implementation 'org.springframework.boot:spring-boot-starter-validation' implementation 'org.springframework.boot:spring-boot-starter-web' compileOnly 'org.projectlombok:lombok' runtimeOnly 'mysql:mysql-connector-java' annotationProcessor 'org.projectlombok:lombok' testImplementation 'org.springframework.boot:spring-boot-starter-test'}tasks.named('test') { useJUnitPlatform()} 项目配置首先将项目配置为多个不同环境 application.yaml 配置 123spring: profiles: active: dev application-dev.yaml 配置 12345678910111213141516171819202122232425server: port: 8099spring: datasource: url: jdbc:mysql://127.0.0.1:3306/atp?useUnicode=true&amp;characterEncoding=utf-8 username: root password: qwe123 driver-class-name: com.mysql.cj.jdbc.Driver hikari: minimum-idle: 5 # 最小空闲时间 idle-timeout: 600000 # 空闲连接存活最大时间，默认是 60 00 00 ，也就是 10 分钟 maximum-pool-size: 10 #连接池最大连接数 默认是 10 auto-commit: true # 自动提交 max-lifetime: 1800000 # 连接池连接的最大生命周期 connection-timeout: 30000 # 连接查实的时间 默认 30 秒 jpa: hibernate: ddl-auto: update connection: provider_class: com.zaxxer.hikari.hibernate.HikariConnectionProvider show-sql: true database: mysql properties: hibernate: dialect: org.hibernate.dialect.MySQL5InnoDBDialect 代码新建一个实体类， 这个类会自动创建表 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960import lombok.Getter;import lombok.Setter;import org.hibernate.annotations.CreationTimestamp;import org.hibernate.annotations.GenericGenerator;import org.hibernate.annotations.UpdateTimestamp;import javax.persistence.*;import javax.validation.constraints.NotBlank;import javax.validation.constraints.NotEmpty;import java.time.LocalDateTime;/** * CREATE TABLE IF NOT EXISTS `t_project`( * `project_id` bigint auto_increment primary key comment '主键', * `project_name` varchar(50) not null comment '项目名称', * `project_owner` varchar(50) not null comment '项目owner', * `project_desc` varchar(250) comment '项目描述', * `created_time` datetime not null comment '创建时间', * `updated_time` datetime not null comment '更新时间' * )ENGINE=InnoDB DEFAULT CHARSET=utf8mb4; */@Table(name = &quot;t_project&quot;)@Getter@Setter@Entitypublic class Project { @Id @GenericGenerator(name = &quot;idGenerator&quot;, strategy = &quot;uuid&quot;) @GeneratedValue(generator = &quot;idGenerator&quot;) @Column(name = &quot;project_id&quot;, length = 32) private String projectId; @Column(name = &quot;project_name&quot;, columnDefinition = &quot;VARCHAR(50) NOT NULL COMMENT '项目名称'&quot;) @NotBlank(message = &quot;project name can't be null! &quot;) @NotEmpty(message = &quot;project name can't be null! &quot;) public String projectName; @Column(name = &quot;project_owner&quot;, columnDefinition = &quot;varchar(50) not null comment '项目owner'&quot;) @NotBlank(message = &quot;project owner can't be null&quot;) @NotEmpty(message = &quot;project owner can't be null! &quot;) public String projectOwner; @Column(name = &quot;project_desc&quot;, columnDefinition = &quot;varchar(250) comment '项目描述'&quot;) public String projectDesc; /** * 自动添加创建时间 */ @Column(name = &quot;created_time&quot;) @CreationTimestamp public LocalDateTime createdAt; /** * 自动添加更新时间 */ @Column(name = &quot;updated_time&quot;) @UpdateTimestamp public LocalDateTime updatedAt;} 然后创建一个 repository 类来执行 sql 操作 12345import com.chancetop.atp.entites.Project;import org.springframework.data.repository.CrudRepository;public interface ProjectRepository extends CrudRepository&lt;Project, String&gt;{} 最后我们写一个测试类， 来测试下是否正常 123456789101112131415161718@SpringBootTestpublic class ProjectTest { private ProjectRepository projectRepository; @Autowired public ProjectTest(ProjectRepository projectRepository){ this.projectRepository = projectRepository; } @Test public void testSave(){ Project project = new Project(); project.setProjectName(&quot;test-project&quot;); project.setProjectOwner(&quot;jackson&quot;); project.setProjectDesc(&quot;this is test project&quot;); projectRepository.save(project); }}","link":"/2022/03/22/JPA%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95-1/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/03/22/hello-world/"}],"tags":[{"name":"JMeter","slug":"JMeter","link":"/tags/JMeter/"},{"name":"springboot","slug":"springboot","link":"/tags/springboot/"}],"categories":[]}